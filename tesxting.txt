 function getAllCoders() 
    {
        $repo = new CoderRepository();
        $arrayCoders= $repo->selectAll();

        foreach($arrayCoders as $coder)
        {
            array_push($this->allCoders, 
            new Coder($coder['id'], $coder['coderName'], $coder['state']));
        }

        return $this->allCoders;
    }



////////////////////////////////




function getCodersAlive() 
    {
        $this->getAllCoders();
        $allCoders = $this->allCoders;

        foreach($allCoders as $coder)
        {
            if($coder->getStatus()==0)
            {
                array_push($this->allCodersAlive, $coder);
               
            }
        }

        return $this->allCodersAlive;
    }


    

////////////////////////////////




       function random () {

        $codersAlive = $this->allCodersAlive;
        $howManyCoders="1";
        $randomCoder=array_rand($codersAlive,$howManyCoders);

        $selectedCoder=$codersAlive[$randomCoder];
        
        $update = new CoderRepository();
        $update->updateById($selectedCoder->getId());    

        return $selectedCoder;

    }
/////////////////////////////////////////////////////////////////////



<?php
namespace App;

class Coder { 
   
   private $coderId;
   private $name; 
   private $status = 'alive';
   private $allCoders = [];
   private $codersAlive = [];
   

   function __construct($coderId, $name, $status) 
   {
      $this->coderId = $coderId;
      $this->name = $name;
      $this->status = $status;
   }
   
   public function getId()
    {
        return $this->coderId;
    }

    function getName()
    {
        return $this->name;
    }

    function getStatus()
    {
        return $this->status;
    }

    function die()
    {
        $this->status = 'dead';       
    }
}
///////////////////////////////////////////////////////////////////////


<?php
namespace App;

final class Killer
{ 
    public $coders= array("Alberto", "Bruna", "Sebastian", "Sergi","Alejandro");
    public $noCodersLeft=array();
    public $shuffledCoders=array();
    
    function random (){
        shuffle($this->coders);
        $this->shuffledCoders=$this->coders;
        return $this->shuffledCoders;
    }
    
    function kill ($totalCoders){
        $conditionToKill=count($this->coders);
        $noConditionToKill=count($this->noCodersLeft);
        $this->shuffledCoders = $this -> random();
        if ($conditionToKill<=$totalCoders) {
            print_r ($this->shuffledCoders);
            print 'Ha muerto: '; 
            print array_shift($this->shuffledCoders);
            return $conditionToKill; 
        }
        if ($noConditionToKill==$totalCoders) {
            print 'NO HAY NADIE PA MATAR';
            return $noConditionToKill;
        }
    }
}

///////////////////////////////////////////////////////////////


<?php
use PHPUnit\Framework\TestCase;
use App\Coder;


final class CoderTest extends TestCase
{
  public function testIdIsInteger()
  {
    $coder = new Coder(1, 'Sergi', 'alive');
    $idObtanined = $coder->getId(); 
    $this->assertIsInt($idObtanined);
  }

  public function testIfIdMatch()
  {
    $coder = new Coder(5, 'Sebastian', 'alive');
    $idObtanined = $coder->getId();
    $this->assertSame(5, $idObtanined);
  }

  public function testNameIsString()
  {
    $coder = new Coder(1, 'Sergi', 'alive');
    $nameObtained = $coder->getName();
    $this->assertIsString($nameObtained); 
  }

  public function testNameMatch()
  {
    $coder = new Coder(1, 'Alberto', 'alive');
    $nameObtained = $coder->getName();
    $this->assertSame('Alberto', $nameObtained); 
  }

  public function testStatusIsString()
  {
    $coder = new Coder(1, 'Sergi', 'alive');
    $statusObtained = $coder->getStatus();
    $this->assertIsString($statusObtained);
  }

  public function testIfCoderDie()
  {
    $coder = new Coder (2, 'Sergi', 'alive');
    $deadCoder = $coder->die();
    $statusObtained = $coder->getStatus();
    $this->assertSame('dead', $statusObtained);
  }
} 



////////////////////////////////////////////////////

<?php
use PHPUnit\Framework\TestCase;
use App\Connection;

final class ConnectTest extends TestCase
{
    public function testConnection (){  
        $connect=new Connection();
        $resultado=$connect->Connect();
        $this->assertSame('Conectado!', $resultado);
    }
}
///////////////////////////////////////////////////////

<?php
use PHPUnit\Framework\TestCase;
use App\KillerApp;
final class KillerTest extends TestCase
{
    public $coders=array("Alberto", "Bruna", "Sebastian", "Sergi","Alejandro");
    public $noCodersLeft=array();
    public function testRandom (){  
        $totalCoders=count($this->coders);
        $randomPick=new KillerApp();
        $resultado=$randomPick->random($totalCoders);
        $this->assertSame($totalCoders, count($resultado));
    }
    public function testKillSomebody (){  
        $totalCoders=count($this->coders);
        $killer=new KillerApp();
        $resultado=$killer->kill($totalCoders);
        $this->assertSame($totalCoders, $resultado);
    }
    public function testNoOneToKill (){
        $totalCoders=count($this->noCodersLeft);
        $killer=new KillerApp();
        $resultado=$killer->kill($totalCoders);
        $this->assertSame($totalCoders, $resultado);
    }
}
